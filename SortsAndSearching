
public class SortsAndSearching {

private int[] array = new int[1000000];
	
	
	public SortsAndSearching(int[] theArray) {
		array = theArray;
	}


	public SortsAndSearching() {
		array = null;
	}


	/**
	 * @return the array
	 */
	public int[] getArray() {
		return array;
	}


	/**
	 * @param array the array to set
	 */
	public void setArray(int[] array) {
		this.array = array;
	}
	// class instructions and https://www.geeksforgeeks.org/bubble-sort-algorithm/ 
	public void bubbleSort(int[] array) {
		boolean done = false;
		while (!done) {
		    done = true; 
		    for (int i = 0; i < array.length - 1; i++) {
		        if (array[i] > array[i + 1]) {
		            int temp = array[i];
		            array[i] = array[i + 1];
		            array[i + 1] = temp;
		            done = false; 
		        }
		    }
		}	
	}
	// class instructions and https://www.geeksforgeeks.org/selection-sort-algorithm-2/ 
	public void selectionSort(int[] array) {

		 for (int i = 0; i < array.length - 1; i++) {
	            int small = i;
	            for (int j = i + 1; j < array.length; j++) {
	                if (array[j] < array[small]) {
	                    small = j;
	                }
	            }
	            int temp = array[small];
	            array[small] = array[i];
	            array[i] = temp;
	        }
		
	}
	// class instructions and https://www.geeksforgeeks.org/insertion-sort-algorithm/  
	public void insertionSort(int[] array) {
		
		for (int i = 1; i < array.length; i++) {
            int key = array[i];
            int j = i - 1;
            while (j >= 0 && array[j] > key) {
                array[j + 1] = array[j];
                j = j - 1;
            }
            array[j + 1] = key;
        }
    }
	
	//https://www.geeksforgeeks.org/merge-sort/ 
	public void merge(int[] array, int left, int mid, int right) {
        
        int n1 = mid - left + 1;
        int n2 = right - mid;

        
        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        
        for (int i = 0; i < n1; i++) {
            leftArray[i] = array[left + i];
        }
        for (int i = 0; i < n2; i++) {
            rightArray[i] = array[mid + 1 + i];
        }

        
        int i = 0, j = 0, k = left; 
        while (i < n1 && j < n2) {
            if (leftArray[i] <= rightArray[j]) {
                array[k] = leftArray[i];
                i++;
            } else {
                array[k] = rightArray[j];
                j++;
            }
            k++;
        }

       
        while (i < n1) {
            array[k] = leftArray[i];
            i++;
            k++;
        }

       
        while (j < n2) {
            array[k] = rightArray[j];
            j++;
            k++;
        }
    }
	
	// https://www.geeksforgeeks.org/merge-sort/ 
	public void mergeSort(int[] arr, int left, int right) {
		
		if(left < right) {
			
		int middle = left + (right - left) / 2;
		mergeSort(arr,left,middle);
		mergeSort(arr, middle + 1, right);
		merge(arr,left,middle,right);
		
		}
	}
	
	public void print(int[] arr) {
		for(int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
	}
	
	public int shellSort(int[] arr) {
		int size = arr.length;
		for(int i = size/2; i > 0; i /= 2) {
			insertionSort(arr);
		}
		return 0;
	}
	// https://www.geeksforgeeks.org/quick-sort-algorithm/ and https://www.w3schools.com/dsa/dsa_algo_quicksort.php
	public void quickSort(int[] arr, int low, int high) {
		
		if(low < high) {
			int pi = partition(arr, low, high);
			quickSort(arr, low, pi - 1);
			quickSort(arr, pi + 1, high);
		}
		
	}
	//https://www.geeksforgeeks.org/quick-sort-algorithm/ and https://www.w3schools.com/dsa/dsa_algo_quicksort.php
	public int partition(int[] arr, int low, int high) {
		
		int pivot = arr[high];
		int index = low - 1;
		
		for(int i = low; i <= high - 1; i++) {
			if(arr[i] <= pivot) {
				index++;
				int temp = arr[index];
				arr[index] = arr[i];
				arr[i] = temp;
				
			}
		}
		int temp = arr[index + 1];
		arr[index + 1] = arr[high];
		arr[high] = temp;
		
		return index + 1;
	}
	
	// https://www.geeksforgeeks.org/heap-sort/ and https://www.youtube.com/watch?v=2DmK_H7IdTo
	public void heapSort(int[] arr) {
		int n = arr.length;
		
		for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }
        
		for (int i = n - 1; i > 0; i--) {
        	
            int temp = arr[0]; 
            arr[0] = arr[i];
            arr[i] = temp;
            heapify(arr, i, 0);
        }
		
		
	}
	// https://www.geeksforgeeks.org/heap-sort/ and https://www.youtube.com/watch?v=2DmK_H7IdTo
	public void heapify(int[] arr, int n, int i) {
		
		int largest = i;
        int l = 2 * i + 1; 
        int r = 2 * i + 2;

        if (l < n && arr[l] > arr[largest]) {
            largest = l;
        }

        if (r < n && arr[r] > arr[largest]) {
            largest = r;
        }
        
        if (largest != i) {
            int temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp;
            heapify(arr, n, largest);
        }
		
	}
	
	// https://www.geeksforgeeks.org/binary-search/ and https://www.youtube.com/watch?v=P3YID7liBug
	public int binarySearch(int arr[], int key) {
		int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == key) {
            	return mid;
            }
            if (arr[mid] < key) {
                low = mid + 1;
            }
            else {
            	 high = mid - 1;
            }
        }
        return -1;
	}
	
	// https://www.tutorialspoint.com/data_structures_algorithms/linear_search_algorithm.htm and https://www.geeksforgeeks.org/linear-search/ and https://www.youtube.com/watch?v=246V51AWwZM
	// along with Notes given in class
	public int linearSearch(int[] arr, int value) {
		
		for (int i = 0; i < arr.length; i++) {
            if (arr[i] == value)
                return i;
       	 }
       		 return -1;
	}
	
	
	
	
	
	
	
	
}
